import csv
import numpy as np
import re
import pandas as pd        
from pandas import *
        
def get_design_np(fname):
    raw = pd.read_csv(fname, sep = ",")
    ret = np.asarray(raw.values, dtype = 'a1000')

    return ret

design_data = get_design_np('design_file_small.csv')

df_design = DataFrame(design_data)

refseq = list(design_data[3])
ID = list(design_data[0])
Name = list(design_data[1])
Row = list(design_data[4])
Column = list(design_data[5])
Feature_number = list(df_design[6])
Mapping_quality_designs = list(df_design[9])
Chromosome_Coordinates_designs = list(df_design[10])

def get_sam_np(fname):  # function name and filename argument
    raw = pd.read_csv(fname, sep = ",")
    ret = np.asarray(raw.values, dtype = 'a5000')
    

    return ret
    
sam_data = get_sam_np('sam_small.csv')
df_sam = DataFrame(sam_data)

chromosome = list(df_sam[2])
position = list(df_sam[3])
read_seq = list(df_sam[9])
chromosome_coordinates = list(DataFrame(np.array(np.transpose((chromosome[:], position[:])))))
CIGAR = list(df_sam[5])

index = 0
for each in CIGAR[index]:
    present_cigar = CIGAR[index]
    start = 10
    for num1, i_or_d, num2, m in re.findall('(\d+)([ID])(\d+)?([A-Za-z])?', present_cigar):
        print num1, i_or_d, start
        if num1:
            start += int(num1)
        if num2:
            start += int(num2)
    index += 1



def get_mpileup_np(fname):
    raw = pd.read_csv(fname, sep = ",")
    ret = np.asarray(raw.values, dtype = 'a5000')
    
    return ret


mpileup_data = get_mpileup_np('mpileup_small.csv')

df_mpileup = DataFrame(mpileup_data)

rbase = list(df_mpileup[2])
symbols = list(df_mpileup[4])
depth = list(df_mpileup[3])

#Calculate Indels for the file
indelcount = 0
for indels in symbols:
    if "-" in indels:
        indelcount += 1
    elif "+" in symbols:
        indelcount += 1
print "indelcount = ",indelcount

#Calculate SNPs for the file
countofnucleotides = 0
snpcount = 0
substitutioncount = 0
bases = ["A", "C", "T", "G", "a", "c", "t", "g"]
for nucleotide in bases:
    if nucleotide in rbase:
        countofnucleotides += 1 
        if countofnucleotides == 1:
            snpcount += 1
        else:
            substitutioncount += 1
print "substitutioncount = ",substitutioncount
print "snpcount = ",snpcount
             
#Extract the mapped reads present in the design file and the sequencing output file(reads)
mapped_reads = []        
for seq in refseq:
    for read in read_seq:
        if seq == read:
            mapped_reads.append(read)
print mapped_reads

#Compute the coverage of each sequence
haploidgenome_length = float(3*(10**9))##in basepairs;for human genome
read_length = 65
index = 0
for each in read_seq:
    print "depth per base = ",depth[index]
    index += 1
    
#write the data to a csv file    
    
temp = [ID, Name, refseq, Chromosome_Coordinates_designs, Mapping_quality_designs, read_seq, chromosome_coordinates ,Row, Column, Feature_number, indelcount, snpcount, substitutioncount, depth]
out = DataFrame(np.asarray(temp))
out.to_csv("out.csv",sep = "\t")
 
    





        
                        


